@inherits LayoutComponentBase
@inject DataService dataService

@if (firstLoading)
{
    <div class="d-flex justify-content-center align-items-center w-100 h-100">

        @if (errorLoading == "")
        {
<img src="img/loading.gif" class=""/>
        }
                else
                {
                    <div class="card-material w-25">
                        @errorLoading
                    </div>
                }
    </div>
}
else
{
<div class="page">
    <CascadingValue Name="electricityMarkets" Value="@electricityMarkets">
        <CascadingValue Name="dbFilled" Value="dbFilled">
            <div class="sidebar">
                <NavMenu OnNewDataAvailable="@SetElectricityMarkets"
                         SuccessFileUpload="@SuccessFileUpload"
                         priceHubs="@priceHubs"
                         ReadDB="@ReadDB"
                         loadingFile="@loadingFile" />
            </div>

            <div class="main">
                <div class="top-row px-4">
                    <div class="">
                        @if (dbFilled)
                        {
    <button class="m-2 btn btn-danger " @onclick="DeleteTable">
        <span class="oi oi-trash mr-2"></span>
        Delete Data
    </button> }
                        else
                        {

    <FileImporter SuccessFileUpload="SuccessFileUpload" Loading="@loadingFile" />}
                    </div>
                </div>

                <div class="content px-4">
                    @Body
                </div>
            </div>
        </CascadingValue>
    </CascadingValue>
</div>}

@code{ List<ElectricityMarket> electricityMarkets = new List<ElectricityMarket>();
    List<PriceHub> priceHubs = new List<PriceHub>();

    bool dbFilled = false;

    Boolean loadingFile = false;

    Boolean firstLoading = true;

    string errorLoading = "";

    protected override async Task OnAfterRenderAsync(Boolean firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            try
            {
                ReadDB();
                firstLoading = false;

            }
            catch (Exception ex)
            {
                errorLoading = ex.Message;
                Console.WriteLine(ex.Message);

            }
            StateHasChanged();
        }

    }

    void SetElectricityMarkets(List<ElectricityMarket> newData)
    {
        electricityMarkets = newData;
        StateHasChanged();
    }

    void ReadDB()
    {
        electricityMarkets = dataService.ListAllData();
        priceHubs = dataService.ListAllPriceHubs();
        dbFilled = electricityMarkets.Count != 0;

        StateHasChanged();
    }

    void DeleteTable()
    {
        dataService.DeleteAllTheData();
        ReadDB();
    }

    private void SuccessFileUpload(Sheet sheet)
    {
        loadingFile = true;
        StateHasChanged();
        dataService.StoreNewData(sheet.sheet);
        ReadDB();
        loadingFile = false;
    } }
